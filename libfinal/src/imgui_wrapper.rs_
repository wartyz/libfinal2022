use ggez::graphics;
use ggez::Context;

use gfx_core::{handle::RenderTargetView, memory::Typed};
use imgui_gfx_renderer::*;
use imgui::*;
use ggez::graphics::drawable_size;

#[derive(Default)]
struct MouseState {
    pos: (i32, i32),
    pressed: (bool, bool, bool),
    //wheel: f32,
}

pub struct ImGuiWrapper {
    pub imgui: imgui::Context,
    pub renderer: Renderer<gfx_core::format::Rgba8, gfx_device_gl::Resources>,
    mouse_state: MouseState,
}

impl ImGuiWrapper {
    pub fn new(contexto: &mut Context) -> Self {
        let mut imgui = imgui::Context::create();
        let (factory, gfx_device, _, _, _) = graphics::gfx_objects(contexto);

        // Shaders
        let shaders = {
            let version = gfx_device.get_info().shading_language;
            if version.is_embedded {
                if version.major >= 3 {
                    Shaders::GlSlEs300
                } else {
                    Shaders::GlSlEs100
                }
            } else if version.major >= 4 {
                Shaders::GlSl400
            } else if version.major >= 3 {
                Shaders::GlSl130
            } else {
                Shaders::GlSl110
            }
        };

        let renderer = Renderer::init(&mut imgui, &mut *factory, shaders).unwrap();
        Self {
            imgui,
            renderer,
            mouse_state: MouseState::default(),
        }
    }

    pub fn render(&mut self, ctx: &mut Context) {
        let (draw_width, draw_height) = drawable_size(ctx);
        self.imgui.io_mut().display_size = [draw_width, draw_height];

        let ui = self.imgui.frame();

        Window::new(im_str!("Hola mundo"))
            .size([300.0, 100.0], Condition::FirstUseEver)
            .build(&ui, || {
                ui.text(im_str!("Kaka de la vaka"));
            });

        // Render
        let (factory, _, encoder, _, render_target) = graphics::gfx_objects(ctx);
        let draw_data = ui.render();
        self.renderer
            .render(
                &mut *factory,
                encoder,
                &mut RenderTargetView::new(render_target.clone()),
                draw_data,
            )
            .unwrap();
    }

    pub fn update_mouse_pos(&mut self, x: f32, y: f32) {
        self.mouse_state.pos = (x as i32, y as i32);
    }

    pub fn update_mouse_down(&mut self, pressed: (bool, bool, bool)) {
        self.mouse_state.pressed = pressed;
    }

    pub fn update_keyboard(&mut self, ch: char) {
        self.imgui.io_mut().add_input_character(ch);
    }
}
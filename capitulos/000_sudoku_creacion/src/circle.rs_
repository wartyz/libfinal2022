//use crate::engine::Parametros;
use libfinal::shapes::*;

use libfinal::color::*;
//use ggez::Context;
//use libfinal::constantes::{WIDTH, HEIGHT};
use libfinal::engine::{Parametros, Engine};
//use libfinal::engine::Context;

#[derive(Debug, Clone, PartialEq)]
pub struct Circle {
    pub x: f32,
    pub y: f32,
    pub r: f32,

    pub growing: bool,
}

impl Circle {
    pub fn new(x: f32, y: f32) -> Circle {
        Circle {
            x,
            y,
            r: 1.0,
            growing: true,
        }
    }

    pub fn grow(&mut self) {
        if self.growing {
            self.r += 0.5;
        }
    }

    pub fn edges(&self, param: &mut Parametros) -> bool {
        (self.x + self.r) > param.ancho_pantalla
            || (self.x - self.r) < 0.0
            || (self.y + self.r) > param.alto_pantalla
            || (self.y - self.r) < 0.0
    }

    //pub fn show(&mut self, param: &mut Parametros, engine: &mut Engine) {
    pub fn show(&self, engine: &mut Engine) {
        stroke1(255, &mut engine.param);

        stroke_weight(&mut engine.param, 2.0);
        no_fill(&mut engine.param);
        ellipse(engine.canvas.as_mut().unwrap(), &mut engine.param, self.x, self.y, self.r, self.r);
    }
}